{"ast":null,"code":"import { TinyEmitter as t } from \"tiny-emitter\";\nimport i from \"virtual-scroll\";\nfunction e() {\n  return e = Object.assign ? Object.assign.bind() : function (t) {\n    for (var i = 1; i < arguments.length; i++) {\n      var e = arguments[i];\n      for (var s in e) Object.prototype.hasOwnProperty.call(e, s) && (t[s] = e[s]);\n    }\n    return t;\n  }, e.apply(this, arguments);\n}\nfunction s(t, i) {\n  let e = t % i;\n  return (i > 0 && e < 0 || i < 0 && e > 0) && (e += i), e;\n}\nconst o = [\"duration\", \"easing\"];\nclass r {\n  to(t) {\n    let i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n        duration: s = 1,\n        easing: r = t => t\n      } = i,\n      n = function (t, i) {\n        if (null == t) return {};\n        var e,\n          s,\n          o = {},\n          r = Object.keys(t);\n        for (s = 0; s < r.length; s++) i.indexOf(e = r[s]) >= 0 || (o[e] = t[e]);\n        return o;\n      }(i, o);\n    this.target = t, this.fromKeys = e({}, n), this.toKeys = e({}, n), this.keys = Object.keys(e({}, n)), this.keys.forEach(i => {\n      this.fromKeys[i] = t[i];\n    }), this.duration = s, this.easing = r, this.currentTime = 0, this.isRunning = !0;\n  }\n  stop() {\n    this.isRunning = !1;\n  }\n  raf(t) {\n    if (!this.isRunning) return;\n    this.currentTime = Math.min(this.currentTime + t, this.duration);\n    const i = this.progress >= 1 ? 1 : this.easing(this.progress);\n    this.keys.forEach(t => {\n      const e = this.fromKeys[t];\n      this.target[t] = e + (this.toKeys[t] - e) * i;\n    }), 1 === i && this.stop();\n  }\n  get progress() {\n    return this.currentTime / this.duration;\n  }\n}\nclass n extends t {\n  constructor() {\n    let {\n      duration: t = 1.2,\n      easing: e = t => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\n      smooth: s = !0,\n      mouseMultiplier: o = 1,\n      smoothTouch: n = !1,\n      touchMultiplier: h = 2,\n      direction: l = \"vertical\",\n      gestureDirection: c = \"vertical\",\n      infinite: a = !1,\n      wrapper: p = window,\n      content: d = document.body\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var u, w, g;\n    super(), this.onWindowResize = () => {\n      this.wrapperWidth = window.innerWidth, this.wrapperHeight = window.innerHeight;\n    }, this.onWrapperResize = _ref => {\n      let [t] = _ref;\n      if (t) {\n        const i = t.contentRect;\n        this.wrapperWidth = i.width, this.wrapperHeight = i.height;\n      }\n    }, this.onContentResize = _ref2 => {\n      let [t] = _ref2;\n      if (t) {\n        const i = t.contentRect;\n        this.contentWidth = i.width, this.contentHeight = i.height;\n      }\n    }, this.onVirtualScroll = _ref3 => {\n      let {\n        deltaY: t,\n        deltaX: i,\n        originalEvent: e\n      } = _ref3;\n      const s = !!e.composedPath().find(t => t.hasAttribute && t.hasAttribute(\"data-lenis-prevent\"));\n      if (e.ctrlKey || s) return;\n      if (this.smooth = e.changedTouches ? this.smoothTouch : this.options.smooth, this.stopped) return void e.preventDefault();\n      if (!this.smooth) return;\n      if (4 === e.buttons) return;\n      this.smooth && e.preventDefault();\n      let o = 0;\n      o = \"both\" === this.gestureDirection ? i + t : \"horizontal\" === this.gestureDirection ? i : t, this.targetScroll -= o, this.scrollTo(this.targetScroll);\n    }, this.onScroll = t => {\n      this.isScrolling && this.smooth || (this.targetScroll = this.scroll = this.lastScroll = this.wrapperNode[this.scrollProperty], this.notify());\n    }, window.lenisVersion = \"0.2.26\", this.options = {\n      duration: t,\n      easing: e,\n      smooth: s,\n      mouseMultiplier: o,\n      smoothTouch: n,\n      touchMultiplier: h,\n      direction: l,\n      gestureDirection: c,\n      infinite: a,\n      wrapper: p,\n      content: d\n    }, this.duration = t, this.easing = e, this.smooth = s, this.mouseMultiplier = o, this.smoothTouch = n, this.touchMultiplier = h, this.direction = l, this.gestureDirection = c, this.infinite = a, this.wrapperNode = p, this.contentNode = d, this.wrapperNode.addEventListener(\"scroll\", this.onScroll), this.wrapperNode === window ? (this.wrapperNode.addEventListener(\"resize\", this.onWindowResize), this.onWindowResize()) : (this.wrapperHeight = this.wrapperNode.offsetHeight, this.wrapperWidth = this.wrapperNode.offsetWidth, this.wrapperObserver = new ResizeObserver(this.onWrapperResize), this.wrapperObserver.observe(this.wrapperNode)), this.contentHeight = this.contentNode.offsetHeight, this.contentWidth = this.contentNode.offsetWidth, this.contentObserver = new ResizeObserver(this.onContentResize), this.contentObserver.observe(this.contentNode), this.targetScroll = this.scroll = this.lastScroll = this.wrapperNode[this.scrollProperty], this.animate = new r();\n    const m = (null == (u = navigator) || null == (w = u.userAgentData) ? void 0 : w.platform) || (null == (g = navigator) ? void 0 : g.platform) || \"unknown\";\n    this.virtualScroll = new i({\n      el: this.wrapperNode,\n      firefoxMultiplier: 50,\n      mouseMultiplier: this.mouseMultiplier * (m.includes(\"Win\") || m.includes(\"Linux\") ? .84 : .4),\n      touchMultiplier: this.touchMultiplier,\n      passive: !1,\n      useKeyboard: !1,\n      useTouch: !0\n    }), this.virtualScroll.on(this.onVirtualScroll);\n  }\n  get scrollProperty() {\n    let t;\n    return t = this.wrapperNode === window ? \"horizontal\" === this.direction ? \"scrollX\" : \"scrollY\" : \"horizontal\" === this.direction ? \"scrollLeft\" : \"scrollTop\", t;\n  }\n  start() {\n    let t = this.wrapperNode;\n    this.wrapperNode === window && (t = document.documentElement), t.classList.remove(\"lenis-stopped\"), this.stopped = !1;\n  }\n  stop() {\n    let t = this.wrapperNode;\n    this.wrapperNode === window && (t = document.documentElement), t.classList.add(\"lenis-stopped\"), this.stopped = !0, this.animate.stop();\n  }\n  destroy() {\n    var t;\n    this.wrapperNode === window && this.wrapperNode.removeEventListener(\"resize\", this.onWindowResize), this.wrapperNode.removeEventListener(\"scroll\", this.onScroll), this.virtualScroll.destroy(), null == (t = this.wrapperObserver) || t.disconnect(), this.contentObserver.disconnect();\n  }\n  get limit() {\n    return \"horizontal\" === this.direction ? this.contentWidth - this.wrapperWidth : this.contentHeight - this.wrapperHeight;\n  }\n  raf(t) {\n    const i = t - (this.now || 0);\n    this.now = t, !this.stopped && this.smooth && (this.lastScroll = this.scroll, this.animate.raf(.001 * i), this.scroll === this.targetScroll && (this.lastScroll = this.scroll), this.isScrolling && (this.setScroll(this.scroll), this.notify()), this.isScrolling = this.scroll !== this.targetScroll);\n  }\n  get velocity() {\n    return this.scroll - this.lastScroll;\n  }\n  setScroll(t) {\n    let i = this.infinite ? s(t, this.limit) : t;\n    \"horizontal\" === this.direction ? this.wrapperNode.scrollTo(i, 0) : this.wrapperNode.scrollTo(0, i);\n  }\n  notify() {\n    let t = this.infinite ? s(this.scroll, this.limit) : this.scroll;\n    this.emit(\"scroll\", {\n      scroll: t,\n      limit: this.limit,\n      velocity: this.velocity,\n      direction: 0 === this.velocity ? 0 : this.velocity > 0 ? 1 : -1,\n      progress: t / this.limit\n    });\n  }\n  scrollTo(t) {\n    let {\n      offset: i = 0,\n      immediate: e = !1,\n      duration: s = this.duration,\n      easing: o = this.easing\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (null == t || this.stopped) return;\n    let r;\n    if (\"number\" == typeof t) r = t;else if (\"top\" === t || \"#top\" === t) r = 0;else if (\"bottom\" === t) r = this.limit;else {\n      let i;\n      if (\"string\" == typeof t) i = document.querySelector(t);else {\n        if (null == t || !t.nodeType) return;\n        i = t;\n      }\n      if (!i) return;\n      let e = 0;\n      if (this.wrapperNode !== window) {\n        const t = this.wrapperNode.getBoundingClientRect();\n        e = \"horizontal\" === this.direction ? t.left : t.top;\n      }\n      const s = i.getBoundingClientRect();\n      r = (\"horizontal\" === this.direction ? s.left : s.top) + this.scroll - e;\n    }\n    r += i, this.targetScroll = this.infinite ? r : Math.max(0, Math.min(r, this.limit)), !this.smooth || e ? (this.animate.stop(), this.scroll = this.lastScroll = this.targetScroll, this.setScroll(this.targetScroll)) : this.animate.to(this, {\n      duration: s,\n      easing: o,\n      scroll: this.targetScroll\n    });\n  }\n}\nexport { n as default };","map":{"version":3,"mappings":"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","names":["dividend","divisor","remainder","Animate","to","target","_ref","duration","easing","t","keys","_objectWithoutPropertiesLoose","this","fromKeys","toKeys","_extends","Object","forEach","key","currentTime","isRunning","stop","raf","deltaTime","Math","min","progress","from","value","Lenis","EventEmitter","constructor","pow","smooth","mouseMultiplier","smoothTouch","touchMultiplier","direction","gestureDirection","infinite","wrapper","window","content","document","body","super","onWindowResize","wrapperWidth","innerWidth","wrapperHeight","innerHeight","onWrapperResize","entry","rect","contentRect","width","height","onContentResize","contentWidth","contentHeight","onVirtualScroll","e","deltaY","deltaX","originalEvent","composedPath","find","node","hasAttribute","ctrlKey","preventScroll","changedTouches","options","stopped","preventDefault","buttons","delta","targetScroll","scrollTo","onScroll","isScrolling","scroll","lastScroll","wrapperNode","scrollProperty","notify","lenisVersion","contentNode","addEventListener","offsetHeight","offsetWidth","wrapperObserver","observe","contentObserver","animate","platform","_navigator$userAgentD","userAgentData","navigator","_navigator2","virtualScroll","el","firefoxMultiplier","includes","passive","useKeyboard","useTouch","on","property","start","element","documentElement","classList","remove","add","destroy","removeEventListener","_this$wrapperObserver","disconnect","now","setScroll","velocity","clampedModulo","limit","emit","offset","immediate","querySelector","nodeType","wrapperOffset","wrapperRect","getBoundingClientRect","left","top","max"],"sources":["F:\\react\\immemorial\\node_modules\\@studio-freight\\lenis\\src\\maths.js","F:\\react\\immemorial\\node_modules\\@studio-freight\\lenis\\src\\lenis.js"],"sourcesContent":["export function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\nexport function mapRange(in_min, in_max, input, out_min, out_max) {\r\n  return ((input - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\r\n}\r\n\r\nexport function lerp(start, end, amt) {\r\n  return (1 - amt) * start + amt * end\r\n}\r\n\r\nexport function truncate(value, decimals) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\nexport function clampedModulo(dividend, divisor) {\r\n  let remainder = dividend % divisor\r\n\r\n  if ((divisor > 0 && remainder < 0) || (divisor < 0 && remainder > 0)) {\r\n    remainder += divisor\r\n  }\r\n\r\n  return remainder\r\n}\r\n","import { TinyEmitter as EventEmitter } from 'tiny-emitter'\r\nimport VirtualScroll from 'virtual-scroll'\r\nimport { version } from '../package.json'\r\nimport { clamp, clampedModulo } from './maths'\r\n\r\nclass Animate {\r\n  to(target, { duration = 1, easing = (t) => t, ...keys } = {}) {\r\n    this.target = target\r\n    this.fromKeys = { ...keys }\r\n    this.toKeys = { ...keys }\r\n    this.keys = Object.keys({ ...keys })\r\n\r\n    // get initial values\r\n    this.keys.forEach((key) => {\r\n      this.fromKeys[key] = target[key]\r\n    })\r\n\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  raf(deltaTime) {\r\n    if (!this.isRunning) return\r\n\r\n    this.currentTime = Math.min(this.currentTime + deltaTime, this.duration)\r\n\r\n    const progress = this.progress >= 1 ? 1 : this.easing(this.progress)\r\n\r\n    this.keys.forEach((key) => {\r\n      const from = this.fromKeys[key]\r\n      const to = this.toKeys[key]\r\n\r\n      const value = from + (to - from) * progress\r\n\r\n      this.target[key] = value\r\n    })\r\n\r\n    if (progress === 1) {\r\n      this.stop()\r\n    }\r\n  }\r\n\r\n  get progress() {\r\n    return this.currentTime / this.duration\r\n  }\r\n}\r\n\r\nexport default class Lenis extends EventEmitter {\r\n  /**\r\n   * @typedef {(t: number) => number} EasingFunction\r\n   * @typedef {'vertical' | 'horizontal'} Direction\r\n   * @typedef {'vertical' | 'horizontal' | 'both'} GestureDirection\r\n   *\r\n   * @typedef LenisOptions\r\n   * @property {number} [duration]\r\n   * @property {EasingFunction} [easing]\r\n   * @property {boolean} [smooth]\r\n   * @property {number} [mouseMultiplier]\r\n   * @property {boolean} [smoothTouch]\r\n   * @property {number} [touchMultiplier]\r\n   * @property {Direction} [direction]\r\n   * @property {GestureDirection} [gestureDirection]\r\n   * @property {boolean} [infinite]\r\n   * @property {Window | HTMLElement} [wrapper]\r\n   * @property {HTMLElement} [content]\r\n   *\r\n   * @param {LenisOptions}\r\n   */\r\n  constructor({\r\n    duration = 1.2,\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/k2tgx2kn8t\r\n    smooth = true,\r\n    mouseMultiplier = 1,\r\n    smoothTouch = false,\r\n    touchMultiplier = 2,\r\n    direction = 'vertical', // vertical, horizontal\r\n    gestureDirection = 'vertical', // vertical, horizontal, both\r\n    infinite = false,\r\n    wrapper = window,\r\n    content = document.body,\r\n  } = {}) {\r\n    super()\r\n\r\n    window.lenisVersion = version\r\n\r\n    this.options = {\r\n      duration,\r\n      easing,\r\n      smooth,\r\n      mouseMultiplier,\r\n      smoothTouch,\r\n      touchMultiplier,\r\n      direction,\r\n      gestureDirection,\r\n      infinite,\r\n      wrapper,\r\n      content,\r\n    }\r\n\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.smooth = smooth\r\n    this.mouseMultiplier = mouseMultiplier\r\n    this.smoothTouch = smoothTouch\r\n    this.touchMultiplier = touchMultiplier\r\n    this.direction = direction\r\n    this.gestureDirection = gestureDirection\r\n    this.infinite = infinite\r\n    this.wrapperNode = wrapper\r\n    this.contentNode = content\r\n\r\n    this.wrapperNode.addEventListener('scroll', this.onScroll)\r\n\r\n    //observe wrapper node size\r\n    if (this.wrapperNode === window) {\r\n      this.wrapperNode.addEventListener('resize', this.onWindowResize)\r\n      this.onWindowResize()\r\n    } else {\r\n      this.wrapperHeight = this.wrapperNode.offsetHeight\r\n      this.wrapperWidth = this.wrapperNode.offsetWidth\r\n\r\n      //observe wrapper node size\r\n      this.wrapperObserver = new ResizeObserver(this.onWrapperResize)\r\n      this.wrapperObserver.observe(this.wrapperNode)\r\n    }\r\n\r\n    this.contentHeight = this.contentNode.offsetHeight\r\n    this.contentWidth = this.contentNode.offsetWidth\r\n\r\n    //observe content node size\r\n    this.contentObserver = new ResizeObserver(this.onContentResize)\r\n    this.contentObserver.observe(this.contentNode)\r\n\r\n    //set initial scroll position\r\n    this.targetScroll =\r\n      this.scroll =\r\n      this.lastScroll =\r\n        this.wrapperNode[this.scrollProperty]\r\n\r\n    this.animate = new Animate()\r\n\r\n    const platform =\r\n      navigator?.userAgentData?.platform || navigator?.platform || 'unknown'\r\n\r\n    // listen and normalize wheel event cross-browser\r\n    this.virtualScroll = new VirtualScroll({\r\n      el: this.wrapperNode,\r\n      firefoxMultiplier: 50,\r\n      mouseMultiplier:\r\n        this.mouseMultiplier *\r\n        (platform.includes('Win') || platform.includes('Linux') ? 0.84 : 0.4), // assuming using a mouse on windows qnd linux\r\n      touchMultiplier: this.touchMultiplier,\r\n      passive: false,\r\n      useKeyboard: false,\r\n      useTouch: true,\r\n    })\r\n\r\n    this.virtualScroll.on(this.onVirtualScroll)\r\n  }\r\n\r\n  get scrollProperty() {\r\n    let property\r\n    if (this.wrapperNode === window) {\r\n      property = this.direction === 'horizontal' ? 'scrollX' : 'scrollY'\r\n    } else {\r\n      property = this.direction === 'horizontal' ? 'scrollLeft' : 'scrollTop'\r\n    }\r\n    return property\r\n  }\r\n\r\n  start() {\r\n    let element = this.wrapperNode\r\n    if (this.wrapperNode === window) element = document.documentElement\r\n    element.classList.remove('lenis-stopped')\r\n\r\n    this.stopped = false\r\n  }\r\n\r\n  stop() {\r\n    let element = this.wrapperNode\r\n    if (this.wrapperNode === window) element = document.documentElement\r\n    element.classList.add('lenis-stopped')\r\n\r\n    this.stopped = true\r\n    this.animate.stop()\r\n  }\r\n\r\n  destroy() {\r\n    if (this.wrapperNode === window) {\r\n      this.wrapperNode.removeEventListener('resize', this.onWindowResize)\r\n    }\r\n    this.wrapperNode.removeEventListener('scroll', this.onScroll)\r\n\r\n    this.virtualScroll.destroy()\r\n    this.wrapperObserver?.disconnect()\r\n    this.contentObserver.disconnect()\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.wrapperWidth = window.innerWidth\r\n    this.wrapperHeight = window.innerHeight\r\n  }\r\n\r\n  onWrapperResize = ([entry]) => {\r\n    if (entry) {\r\n      const rect = entry.contentRect\r\n      this.wrapperWidth = rect.width\r\n      this.wrapperHeight = rect.height\r\n    }\r\n  }\r\n\r\n  onContentResize = ([entry]) => {\r\n    if (entry) {\r\n      const rect = entry.contentRect\r\n      this.contentWidth = rect.width\r\n      this.contentHeight = rect.height\r\n    }\r\n  }\r\n\r\n  get limit() {\r\n    return this.direction === 'horizontal'\r\n      ? this.contentWidth - this.wrapperWidth\r\n      : this.contentHeight - this.wrapperHeight\r\n  }\r\n\r\n  onVirtualScroll = ({ deltaY, deltaX, originalEvent: e }) => {\r\n    const preventScroll = !!e\r\n      .composedPath()\r\n      .find(\r\n        (node) => node.hasAttribute && node.hasAttribute('data-lenis-prevent')\r\n      )\r\n\r\n    if (e.ctrlKey || preventScroll) return\r\n\r\n    // switch to smooth if event is touch and if smoothTouch=true\r\n    this.smooth = !!e.changedTouches ? this.smoothTouch : this.options.smooth\r\n\r\n    if (this.stopped) {\r\n      e.preventDefault()\r\n      return\r\n    }\r\n\r\n    if (!this.smooth) return\r\n\r\n    // fix wheel holding scroll https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n    if (e.buttons === 4) return\r\n\r\n    // prevent native wheel scrolling\r\n    if (this.smooth) e.preventDefault()\r\n\r\n    let delta = 0\r\n    if (this.gestureDirection === 'both') {\r\n      delta = deltaX + deltaY\r\n    } else if (this.gestureDirection === 'horizontal') {\r\n      delta = deltaX\r\n    } else {\r\n      // vertical\r\n      delta = deltaY\r\n    }\r\n\r\n    this.targetScroll -= delta\r\n    // this.targetScroll = clamp(0, this.targetScroll, this.limit)\r\n\r\n    this.scrollTo(this.targetScroll)\r\n  }\r\n\r\n  raf(now) {\r\n    const deltaTime = now - (this.now || 0)\r\n    this.now = now\r\n\r\n    if (this.stopped || !this.smooth) return\r\n\r\n    this.lastScroll = this.scroll\r\n\r\n    // where this.scroll is updated\r\n    this.animate.raf(deltaTime * 0.001)\r\n\r\n    if (this.scroll === this.targetScroll) {\r\n      // if target reached velocity should be 0\r\n      this.lastScroll = this.scroll\r\n    }\r\n\r\n    if (this.isScrolling) {\r\n      this.setScroll(this.scroll)\r\n      this.notify()\r\n    }\r\n\r\n    this.isScrolling = this.scroll !== this.targetScroll\r\n  }\r\n\r\n  get velocity() {\r\n    return this.scroll - this.lastScroll\r\n  }\r\n\r\n  setScroll(value) {\r\n    let scroll = this.infinite ? clampedModulo(value, this.limit) : value\r\n\r\n    this.direction === 'horizontal'\r\n      ? this.wrapperNode.scrollTo(scroll, 0)\r\n      : this.wrapperNode.scrollTo(0, scroll)\r\n  }\r\n\r\n  onScroll = (e) => {\r\n    // if isScrolling false we can consider user isn't scrolling with wheel (cmd+F, keyboard or whatever). So we must scroll to value immediately\r\n    if (!this.isScrolling || !this.smooth) {\r\n      // where native scroll happens\r\n      this.targetScroll =\r\n        this.scroll =\r\n        this.lastScroll =\r\n          this.wrapperNode[this.scrollProperty]\r\n\r\n      this.notify()\r\n    }\r\n  }\r\n\r\n  notify() {\r\n    let scroll = this.infinite\r\n      ? clampedModulo(this.scroll, this.limit)\r\n      : this.scroll\r\n    let direction = this.velocity === 0 ? 0 : this.velocity > 0 ? 1 : -1\r\n\r\n    this.emit('scroll', {\r\n      scroll,\r\n      limit: this.limit,\r\n      velocity: this.velocity,\r\n      direction,\r\n      progress: scroll / this.limit,\r\n    })\r\n  }\r\n\r\n  scrollTo(\r\n    target,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      duration = this.duration,\r\n      easing = this.easing,\r\n    } = {}\r\n  ) {\r\n    if (target === undefined || target === null || this.stopped) return\r\n    let value\r\n\r\n    if (typeof target === 'number') {\r\n      value = target\r\n    } else if (target === 'top' || target === '#top') {\r\n      value = 0\r\n    } else if (target === 'bottom') {\r\n      value = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      } else {\r\n        return\r\n      }\r\n\r\n      if (!node) return\r\n      let wrapperOffset = 0\r\n\r\n      if (this.wrapperNode !== window) {\r\n        const wrapperRect = this.wrapperNode.getBoundingClientRect()\r\n        wrapperOffset =\r\n          this.direction === 'horizontal' ? wrapperRect.left : wrapperRect.top\r\n      }\r\n\r\n      const rect = node.getBoundingClientRect()\r\n\r\n      value =\r\n        (this.direction === 'horizontal' ? rect.left : rect.top) +\r\n        this.scroll -\r\n        wrapperOffset\r\n    }\r\n\r\n    value += offset\r\n\r\n    if (this.infinite) {\r\n      this.targetScroll = value\r\n    } else {\r\n      this.targetScroll = clamp(0, value, this.limit)\r\n    }\r\n\r\n    if (!this.smooth || immediate) {\r\n      this.animate.stop()\r\n      this.scroll = this.lastScroll = this.targetScroll\r\n      this.setScroll(this.targetScroll)\r\n    } else {\r\n      this.animate.to(this, {\r\n        duration,\r\n        easing,\r\n        scroll: this.targetScroll,\r\n      })\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}