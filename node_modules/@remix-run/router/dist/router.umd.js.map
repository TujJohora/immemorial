{"version":3,"file":"router.umd.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type SubmissionFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | SubmissionFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: SubmissionFormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  SubmissionFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validActionMethodsArr: SubmissionFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validActionMethods = new Set<SubmissionFormMethod>(validActionMethodsArr);\n\nconst validRequestMethodsArr: FormMethod[] = [\"get\", ...validActionMethodsArr];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(\n        state,\n        result,\n        opts && opts.replace === true\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult);\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location);\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      formMethod &&\n      isSubmissionMethod(formMethod) &&\n      formEncType &&\n      formData\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          formMethod,\n          formAction: redirect.location,\n          formEncType,\n          formData,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: formMethod || undefined,\n          formAction: formAction || undefined,\n          formEncType: formEncType || undefined,\n          formData: formData || undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isSubmissionMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, { signal: request.signal });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod && isSubmissionMethod(opts.formMethod)) {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: stripHashFromPath(path),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isSubmissionMethod(method: string): method is SubmissionFormMethod {\n  return validActionMethods.has(method as SubmissionFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","current","parsedPath","searchIndex","createClientSideURL","origin","URL","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validActionMethodsArr","validActionMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","result","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectLocation","newOrigin","redirectHistoryAction","isSubmissionMethod","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","isAbsolute","activeMatches","resolvedLocation","contentType","text","deferred","toUpperCase","body","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","errorMessage","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"mappings":"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"}